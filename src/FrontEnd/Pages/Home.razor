@page "/"
@using System.ComponentModel.DataAnnotations
@using FrontEnd.Models
@using FrontEnd.Services
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.QuickGrid
@using ZgM.ProjectCoordinator.Shared

@inject IPlaceService PlaceService;
@inject IUserService UserService;

<PageTitle>Home</PageTitle>

<EditForm EditContext="editContext" OnValidSubmit="Submit" FormName="Address">
    <DataAnnotationsValidator />
    <div>
        <label>
            Adresse:
            <InputText @bind-Value="address!.Value" />
        </label>
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

<p>@_status</p>

@if(trips.Count > 0)
{
    <QuickGrid Items="trips.AsQueryable()" Class="table table-hover table-bordered table-striped">
    <PropertyColumn Property="@(t => t.User)" Sortable="true" />
    <PropertyColumn Property="@(t => t.Place)" Sortable="false" />
    <PropertyColumn Property="@(t => t.time)" Sortable="true" IsDefaultSortColumn="true" />
    <PropertyColumn Property="@(t => t.Cost)" Format="C2" Sortable="true" IsDefaultSortColumn="true" />
</QuickGrid>


} else {
    <p><em>Loading Addresses</em></p>
}


@code {
    [SupplyParameterFromForm]
    private Address? address { get; set; }

    private string _status = "Please enter an address";

    private bool _placesLoaded = false;

    private EditContext? editContext { get; set; }

    private List<TripViewModel> trips = new List<TripViewModel>();


    protected override void OnInitialized()
    {
        address ??= new Address(){Value=""};
        editContext = new(address);
        LoadPlaces();
        Console.WriteLine("Initialization finished");
    }

    private async void LoadPlaces()
    {
        Console.WriteLine("Start getting places");

        var places = await PlaceService.GetAllPlacesAsync();

        foreach (Place place in places)
        {
            var user = new User(place.UserId, $"Loading Name ({place.UserId})");
            var trip = new TripViewModel()
                {
                    User = user,
                    Place = place
                };
            _ = UserService.GetUserAsync(user.Id).ContinueWith(task => {
                trip.User = task.Result;
                StateHasChanged();
            }            );

            trips.Add(trip);
        }
        StateHasChanged();
        _placesLoaded = true;

        Console.WriteLine("Places finished");
    }

    private async void Submit()
    {
        Console.WriteLine(address!.Value);

        while (!_placesLoaded)
        {
            _status = "Wait to load all places";
            await Task.Delay(100);
        }

        _status = "Loading times";

        IEnumerable<Task> tasks = trips.Select(trip =>
        {
            return PlaceService.GetTripAsync(trip.Place.Id, address!.Value!).ContinueWith(task => {
                trip.time = task.Result.Time;
                trip.Cost = task.Result.Cost/100;
                StateHasChanged();
            });
        });

        await Task.WhenAll(tasks);

        _status = "All times loaded";
    }

    protected class TripViewModel
    {
        public required User User { get; set; }
        public required Place Place { get; set; }
        public TimeSpan? time { get; set; }
        public decimal Cost { get; set; }
    }

    public class Address
    {
        [Required]
        public string? Value { get; set; }
    }
}