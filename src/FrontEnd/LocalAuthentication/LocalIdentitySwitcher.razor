@implements IDisposable
@namespace FrontEnd.LocalAuthentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject IWebAssemblyHostEnvironment hostEnv

    <div class="w-25">
        Change User:
        <select id="userselect" class="form-control" @onchange="ChangeUser">
            @foreach (var value in LocalAuthenticationProvider.GetNames())
            {
                @if (value == _currentUserName)
                {
                    <option value="@value" selected>@value</option>
                }
                else
                {
                    <option value="@value">@value</option>
                }
            }
        </select>
    </div>


@code {
#if DEBUG
    [CascadingParameter] private Task<AuthenticationState>? authTask { get; set; }

    [Inject] private AuthenticationStateProvider? authenticationStateProvider { get; set; }
    private LocalAuthenticationProvider localAuthenticationProvider => (LocalAuthenticationProvider)authenticationStateProvider!;

    private string _currentUserName = "None";

    protected async override Task OnInitializedAsync()
    {
        var authState = await authTask!;
        localAuthenticationProvider.AuthenticationStateChanged += this.OnUserChanged;
    }

    private async Task ChangeUser(ChangeEventArgs e)
        => await localAuthenticationProvider.ChangeIdentityAsync(e.Value?.ToString() ?? string.Empty);

    private async void OnUserChanged(Task<AuthenticationState> state)
        => await this.GetUser(state);

    private async Task GetUser(Task<AuthenticationState> state)
    {
        var authState = await state;
    }

    public void Dispose()
        => localAuthenticationProvider.AuthenticationStateChanged -= this.OnUserChanged;
#endif
}