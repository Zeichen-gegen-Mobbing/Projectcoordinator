@using FrontEnd.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IRoleService RoleService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FrontEnd</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView>
            <Authorized>
                @if (hasProjectCoordinationRole)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="trips">
                            <span class="bi bi-geo-alt-fill" aria-hidden="true"></span> Trip Calculator
                        </NavLink>
                    </div>
                }
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool hasProjectCoordinationRole = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckRoles();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await CheckRoles();
        StateHasChanged();
    }

    private async Task CheckRoles()
    {
        Console.WriteLine("Checking roles in NavMenu...");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine($"User {authState.User.Identity?.Name} is authenticated: {authState.User.Identity?.IsAuthenticated}");
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            try
            {
                Console.WriteLine("Fetching user roles...");
                hasProjectCoordinationRole = await RoleService.HasRole("projectcoordination");
                Console.WriteLine($"User has projectcoordination role: {hasProjectCoordinationRole}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching roles: {ex.ToString()} {ex.Message}");
                hasProjectCoordinationRole = false;
            }
        }
        else
        {
            hasProjectCoordinationRole = false;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}