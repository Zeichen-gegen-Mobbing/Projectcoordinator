@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using FrontEnd.Services;
@using ZgM.ProjectCoordinator.Shared;
@inject ILocationService LocationService

<div class="location-selector">
	<h4>Location Search</h4>
	<EditForm Model="searchModel" OnValidSubmit="Search">
		<DataAnnotationsValidator />
		<div class="search-box">
			<label>
				Search for a location:
				<InputText @bind-Value="searchModel.SearchText" placeholder="Enter address or place name"
					class="form-control" />
			</label>
			<button disabled="@(Disabled || isSearching)" type="submit" class="btn btn-primary">
				@if (isSearching)
				{
					<span>Searching...</span>
				}
				else
				{
					<span>Search</span>
				}
			</button>
		</div>
		<ValidationSummary />
	</EditForm>

	@if (selectedLocation != null)
	{
		<div class="selected-location-label">
			<h5>Selected Location</h5>
			<p><strong>@selectedLocation.Value.Label</strong></p>
		</div>
	}

	@if (searchResults != null && searchResults.Any())
	{
		<div class="results-container">
			<h5>Search Results</h5>
			<table class="table table-striped table-hover">
				<thead>
					<tr>
						<th>Label</th>
						<th>Adresse</th>
						<th></th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var result in searchResults)
					{
						<tr>
							<td>@result.Label</td>
							<td>
								@{
									var parts = new List<string>();
									if (!string.IsNullOrEmpty(result.Street))
									{
										parts.Add($"{result.Street} {result.HouseNumber}".Trim());
									}
									if (!string.IsNullOrEmpty(result.PostalCode) || !string.IsNullOrEmpty(result.Locality))
									{
										parts.Add($"{result.PostalCode} {result.Locality}".Trim());
									}
									if (!string.IsNullOrEmpty(result.Country))
									{
										parts.Add(result.Country);
									}
								}
								@string.Join(", ", parts)
							</td>
							<td>
								<button @onclick="() => ShowMap(result)" class="btn btn-sm btn-secondary" title="Show on map">
									<span>🗺️</span>
								</button>
							</td>
							<td>
								<button disabled="@Disabled" @onclick="() => SelectLocation(result)"
									class="btn btn-sm btn-success">
									Select
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else if (hasSearched && (searchResults == null || !searchResults.Any()))
	{
		<div class="alert alert-info">
			No results found. Try a different search term.
		</div>
	}

	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<div class="alert alert-danger">
			@errorMessage
		</div>
	}
</div>

@if (showMapModal && mapLocation != null)
{
	<div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@mapLocation.Value.Label</h5>
					<button type="button" class="btn-close" @onclick="CloseMap"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<strong>Address:</strong>
						<div>
							@{
								var addressParts = new List<string>();
								if (!string.IsNullOrEmpty(mapLocation.Value.Street))
								{
									addressParts.Add($"{mapLocation.Value.Street} {mapLocation.Value.HouseNumber}".Trim());
								}
								if (!string.IsNullOrEmpty(mapLocation.Value.PostalCode) || !string.IsNullOrEmpty(mapLocation.Value.Locality))
								{
									addressParts.Add($"{mapLocation.Value.PostalCode} {mapLocation.Value.Locality}".Trim());
								}
								if (!string.IsNullOrEmpty(mapLocation.Value.Country))
								{
									addressParts.Add(mapLocation.Value.Country);
								}
							}
							@string.Join(", ", addressParts)
						</div>
					</div>
					<iframe src="@mapUrl" width="100%" height="400" style="border: 1px solid #ccc"></iframe>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CloseMap">Close</button>
					<button disabled="@Disabled" type="button" class="btn btn-success" @onclick="SelectMapLocation">Select This Location</button>
				</div>
			</div>
		</div>
	</div>
}

<style>
	.location-selector {
		padding: 1rem;
	}

	.search-box {
		display: flex;
		gap: 1rem;
		align-items: flex-end;
		margin-bottom: 1rem;
	}

	.search-box label {
		flex: 1;
	}

	.results-container {
		margin-top: 1rem;
	}

	.selected-location-label {
		margin-top: 1rem;
		padding: 0.5rem;
		border-left: 4px solid #28a745;
		background-color: #f8f9fa;
	}

	.selected-location-label h5 {
		margin-bottom: 0.25rem;
		font-size: 1rem;
	}

	.selected-location-label p {
		margin: 0;
	}
</style>

@code {
	[Parameter]
	[Required]
	public required Func<double, double, Task> OnLocationSelected { get; init; }
	[Parameter]
	[Required]
	public required bool Disabled { get; set; }

	private readonly SearchModel searchModel = new();
	private IEnumerable<LocationSearchResult>? searchResults;
	private LocationSearchResult? selectedLocation;
	private bool hasSearched = false;
	private bool isSearching = false;
	private string? errorMessage;
	private bool showMapModal = false;
	private LocationSearchResult? mapLocation;

	private async Task Search()
	{
		if (string.IsNullOrWhiteSpace(searchModel.SearchText))
		{
			return;
		}

		isSearching = true;
		errorMessage = null;
		hasSearched = false;
		searchResults = null;
		selectedLocation = null;

		try
		{
			searchResults = await LocationService.SearchLocationsAsync(searchModel.SearchText);
			hasSearched = true;
		}
		catch (Exception ex)
		{
			errorMessage = $"Error searching for locations: {ex.Message}";
		}
		finally
		{
			isSearching = false;
		}
	}

	private async Task SelectLocation(LocationSearchResult result)
	{
		selectedLocation = result;
		searchResults = null;
		hasSearched = false;
		await OnLocationSelected(result.Latitude, result.Longitude);
	}

	private void ShowMap(LocationSearchResult result)
	{
		mapLocation = result;
		showMapModal = true;
	}

	private void CloseMap()
	{
		showMapModal = false;
		mapLocation = null;
	}

	private async Task SelectMapLocation()
	{
		if (mapLocation.HasValue)
		{
			await SelectLocation(mapLocation.Value);
			CloseMap();
		}
	}

	public class SearchModel
	{
		[Required(ErrorMessage = "Please enter a search term")]
		[MinLength(2, ErrorMessage = "Search term must be at least 2 characters")]
		public string SearchText { get; set; } = string.Empty;
	}

	private string mapUrl => mapLocation.HasValue ?
	String.Format(new System.Globalization.CultureInfo("en-US"),
	"https://www.openstreetmap.org/export/embed.html?bbox={0},{1},{2},{3}&layer=mapnik&marker={4},{5}",
	mapLocation.Value.Longitude - 0.1, mapLocation.Value.Latitude - 0.1,
	mapLocation.Value.Longitude + 0.1, mapLocation.Value.Latitude + 0.1,
	mapLocation.Value.Latitude, mapLocation.Value.Longitude)
	: "";
}