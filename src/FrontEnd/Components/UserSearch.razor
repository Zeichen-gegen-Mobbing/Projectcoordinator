@using FrontEnd.Models
@using FrontEnd.Services
@inject IUserService UserService

<div class="card">
    <div class="card-body">
        <h5 class="card-title">@Title</h5>
        <EditForm Model="searchModel" OnValidSubmit="SearchUsers">
            <div class="mb-3">
                <label for="@inputId" class="form-label">@Label</label>
                <div class="d-flex gap-2">
                    <InputText @bind-Value="searchModel.SearchQuery" class="form-control" id="@inputId"
                        placeholder="Enter user name or email" />
                    <button type="submit" class="btn btn-primary" disabled="@isSearching">
                        @if (isSearching)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        }
                        Search
                    </button>
                </div>
            </div>
        </EditForm>
        <div class="mb-3">
            @if (searchedUsers.Count > 0)
            {
                <div class="list-group">
                    @foreach (var user in searchedUsers)
                    {
                        <button type="button"
                            class="list-group-item list-group-item-action @(SelectedUser?.Id == user.Id ? "active" : "")"
                            @onclick="() => SelectUser(user)">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">@user.DisplayName</h6>
                            </div>
                            <small>@user.Mail</small>
                        </button>
                    }
                </div>
            }
            else if (!string.IsNullOrWhiteSpace(searchModel.SearchQuery) && searchPerformed)
            {
                <div class="alert alert-info" role="alert">
                    No users found matching "@searchModel.SearchQuery"
                </div>
            }
        </div>

        @if (internalErrorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @internalErrorMessage
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = "Search User";

    [Parameter]
    public string Label { get; set; } = "Search for user";

    [Parameter]
    public GraphUser? SelectedUser { get; set; }

    [Parameter]
    public EventCallback<GraphUser> OnUserSelected { get; set; }

    private readonly SearchModel searchModel = new();
    private List<GraphUser> searchedUsers = new();
    private bool searchPerformed;
    private bool isSearching;
    private string? internalErrorMessage;
    private string inputId = $"userSearch_{Guid.NewGuid():N}";

    // Removed auto-search on input/after render. Search is now triggered explicitly by the Search button.

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(searchModel.SearchQuery))
        {
            searchedUsers.Clear();
            searchPerformed = false;
            internalErrorMessage = null;
            return;
        }

        isSearching = true;
        internalErrorMessage = null;
        try
        {
            searchedUsers = (await UserService.SearchUsersAsync(searchModel.SearchQuery)).ToList();
            searchPerformed = true;
        }
        catch (Exception)
        {
            searchedUsers.Clear();
            internalErrorMessage = "Something went wrong";
        }
        finally
        {
            isSearching = false;
        }
    }

    private async Task SelectUser(GraphUser user)
    {
        await OnUserSelected.InvokeAsync(user);
    }

    public void Clear()
    {
        searchModel.SearchQuery = "";
        searchedUsers.Clear();
        searchPerformed = false;
        internalErrorMessage = null;
    }

    public class SearchModel
    {
        public string SearchQuery { get; set; } = string.Empty;
    }
}